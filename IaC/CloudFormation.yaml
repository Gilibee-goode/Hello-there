AWSTemplateFormatVersion: '2010-09-09' # CloudFormation template version declaration
Description: VPC with 2 Public Subnets and 2 Private Subnets across 2 AZs # Description of this CloudFormation template

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16 # The IP address range for the VPC
      EnableDnsSupport: true # Enables DNS resolution within the VPC
      EnableDnsHostnames: true # Allows instances to receive DNS hostnames
      Tags:
        - Key: Name
          Value: MyCustomVPC # Name tag for the VPC

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW # Name tag for the Internet Gateway

  # Attach the Internet Gateway to the VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC # Reference to MyVPC
      InternetGatewayId: !Ref MyInternetGateway # Reference to MyInternetGateway

  # Public Subnet in AZ1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.1.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [0, !GetAZs ''] # Selects the first availability zone
      MapPublicIpOnLaunch: true # Assigns public IP to instances in this subnet
      Tags:
        - Key: Name
          Value: PublicSubnet1 # Name tag for the subnet

  # Private Subnet in AZ1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.2.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [0, !GetAZs ''] # Matches PublicSubnet1 AZ for consistency
      MapPublicIpOnLaunch: false # Does not assign public IPs to instances
      Tags:
        - Key: Name
          Value: PrivateSubnet1 # Name tag for the subnet

  # Public Subnet in AZ2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.3.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [1, !GetAZs ''] # Selects the second availability zone
      MapPublicIpOnLaunch: true # Assigns public IP to instances in this subnet
      Tags:
        - Key: Name
          Value: PublicSubnet2 # Name tag for the subnet

  # Private Subnet in AZ2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.4.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [1, !GetAZs ''] # Matches PublicSubnet2 AZ for consistency
      MapPublicIpOnLaunch: false # Does not assign public IPs to instances
      Tags:
        - Key: Name
          Value: PrivateSubnet2 # Name tag for the subnet
          
          
  # ALB Security Group - Allows inbound HTTP traffic from anywhere
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB allowing HTTP access"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Target Group for ALB - HTTP traffic to instances on port 80
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance

  # ALB Listener - Forwards incoming requests to the target group
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  # ECR Repository
  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: my-dorker-repo #  Docker repository name
      ImageScanningConfiguration:
        scanOnPush: true #  Enable scanning of images on push for vulnerabilities
      ImageTagMutability: MUTABLE #  or IMMUTABLE depending on versioning preference


  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "My DB Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      # Optionally tags
      Tags:
        - Key: Name
          Value: MyDBSubnetGroup



  # RDS - MySQL database
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: mydb # Name for the MySQL database instance
      AllocatedStorage: 20 # Storage size in GB
      DBInstanceClass: db.t3.micro # Instance type of the DB instance
      Engine: MySQL
      EngineVersion: "8.0" # Specify your desired MySQL version
      MasterUsername: adminuser # Username for the master DB user  -----------------------------------------------
      MasterUserPassword: "adminuser" # Specify a strong password   -----------------------------------------------
      MultiAZ: false # Set to true if you want a Multi-AZ deployment for high availability
      DBSubnetGroupName: !Ref MyDBSubnetGroup # Reference your DB Subnet Group here
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup # Reference to a DB security group
      PubliclyAccessible: false # Set to true if you need external access
      # You can specify additional properties like backup retention, tags, etc.


  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16 # Adjust the CIDR to match your VPC's or specific subnets






