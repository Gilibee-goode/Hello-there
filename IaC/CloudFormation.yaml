AWSTemplateFormatVersion: '2010-09-09' # CloudFormation template version declaration
Description: VPC with 2 Public Subnets and 2 Private Subnets across 2 AZs # Description of this CloudFormation template



Parameters:
  DBUsername:
    Type: String
    Description: "The username for the database."
    Default: "defaultdbuser" # Default username for the database

    
    
Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16 # The IP address range for the VPC
      EnableDnsSupport: true # Enables DNS resolution within the VPC
      EnableDnsHostnames: true # Allows instances to receive DNS hostnames
      Tags:
        - Key: Name
          Value: MyCustomVPC # Name tag for the VPC

  # Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW # Name tag for the Internet Gateway

  # Attach the Internet Gateway to the VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC # Reference to MyVPC
      InternetGatewayId: !Ref MyInternetGateway # Reference to MyInternetGateway

  # Public Subnet in AZ1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.1.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [0, !GetAZs ''] # Selects the first availability zone
      MapPublicIpOnLaunch: true # Assigns public IP to instances in this subnet
      Tags:
        - Key: Name
          Value: PublicSubnet1 # Name tag for the subnet

  # Private Subnet in AZ1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.2.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [0, !GetAZs ''] # Matches PublicSubnet1 AZ for consistency
      MapPublicIpOnLaunch: false # Does not assign public IPs to instances
      Tags:
        - Key: Name
          Value: PrivateSubnet1 # Name tag for the subnet

  # Public Subnet in AZ2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.3.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [1, !GetAZs ''] # Selects the second availability zone
      MapPublicIpOnLaunch: true # Assigns public IP to instances in this subnet
      Tags:
        - Key: Name
          Value: PublicSubnet2 # Name tag for the subnet

  # Private Subnet in AZ2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC # Associates this subnet with MyVPC
      CidrBlock: 10.0.4.0/24 # IP address range for the subnet
      AvailabilityZone: !Select [1, !GetAZs ''] # Matches PublicSubnet2 AZ for consistency
      MapPublicIpOnLaunch: false # Does not assign public IPs to instances
      Tags:
        - Key: Name
          Value: PrivateSubnet2 # Name tag for the subnet
          
          
  # ALB Security Group - Allows inbound HTTP traffic from anywhere
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB allowing HTTP access"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Target Group for ALB - HTTP traffic to instances on port 80
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance

  # ALB Listener - Forwards incoming requests to the target group
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  # ECR Repository Frontend
  MyECRRepositoryFront:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hello-there-frontend #  Docker repository name
      ImageScanningConfiguration:
        scanOnPush: true #  Enable scanning of images on push for vulnerabilities
      ImageTagMutability: MUTABLE #  or IMMUTABLE depending on versioning preference

  # ECR Repository Backend
  MyECRRepositoryBack:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hello-there-backend #  Docker repository name
      ImageScanningConfiguration:
        scanOnPush: true #  Enable scanning of images on push for vulnerabilities
      ImageTagMutability: MUTABLE #  or IMMUTABLE depending on versioning preference


  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "My DB Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      # Optionally tags
      Tags:
        - Key: Name
          Value: MyDBSubnetGroup



  # RDS - MySQL database
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: mydb # Name for the MySQL database instance
      AllocatedStorage: 20 # Storage size in GB
      DBInstanceClass: db.t3.micro # Instance type of the DB instance
      Engine: MySQL
      EngineVersion: "8.0" # Specify your desired MySQL version
      MasterUsername: adminuser # Username for the master DB user  -----------------------------------------------
      MasterUserPassword: "adminuser" # Specify a strong password   -----------------------------------------------
      MultiAZ: false # Set to true if you want a Multi-AZ deployment for high availability
      DBSubnetGroupName: !Ref MyDBSubnetGroup # Reference your DB Subnet Group here
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup # Reference to a DB security group
      PubliclyAccessible: true # Set to true if you need external access
      # You can specify additional properties like backup retention, tags, etc.


  # DB security group 
  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16 # Adjust the CIDR to match your VPC's or specific subnets


  # set RDS secret
  MyDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-DBSecret" # Name of the secret using CloudFormation stack name for uniqueness
      Description: "Secret for RDS database credentials" # Descriptive text for the secret's purpose
      # Generates a secret string:
      GenerateSecretString:
        # Template for the secret string; includes the DB username
        SecretStringTemplate: !Sub |
          {
            "username": "${DBUsername}"
          }
        GenerateStringKey: "password" # Key for the generated part of the secret (the password)
        PasswordLength: 16 # Length of the generated password
        ExcludePunctuation: true # Excludes punctuation from the generated password for compatibility
        IncludeSpace: false # Excludes spaces from the generated password for simplicity


#  # Secret policy access
#  ECSExecutionRolePolicy:
#    Type: AWS::IAM::Policy
#    Properties:
#      PolicyName: AccessSecretsPolicy
#      Roles: 
#        - !Ref ECSTaskExecutionRole # Replace with your ECS Task Execution Role ----------------------
#      PolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Action: secretsmanager:GetSecretValue
#            Resource: !Ref MyDBSecret
           
           
  # ECS Role          
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'secretsmanager:GetSecretValue' # Secrets Manager for your database credentials
                Resource: '*'
            
      
  # ECS cluster     
  MyEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyEcsCluster # Name of your ECS cluster

  # ECS task
  MyEcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: hello-there # A unique name for your task definition
      Cpu: "256" # CPU units for the task
      Memory: "512" # Memory in MiB for the task
      NetworkMode: awsvpc # Required for Fargate
      RequiresCompatibilities:
        - FARGATE # Specifies this task definition requires the Fargate launch type
      ExecutionRoleArn: !Ref ECSTaskExecutionRole # Assumes you have this role defined elsewhere in your template
      ContainerDefinitions:
        - Name: hello-there-backend
          Image: 058264276766.dkr.ecr.il-central-1.amazonaws.com/hello-there-backend
          Essential: true
        #  Environment: # Define environment variables, if any
        #    - Name: DB_SECRET
        #      Value: !Ref MyDBSecret # Assuming you have a Secrets Manager secret for your DB credentials
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/hello-there-backend
              awslogs-region: <region>
              awslogs-stream-prefix: ecs
        - Name: hello-there-frontend
          Image: 058264276766.dkr.ecr.il-central-1.amazonaws.com/hello-there-frontend
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/hello-there-frontend
              awslogs-region: <region>
              awslogs-stream-prefix: ecs



  MyEcsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: ecs-service-hello-there # Name of your service
      Cluster: !Ref MyEcsCluster
      TaskDefinition: !Ref MyEcsTaskDefinition
      DesiredCount: 1 # Task instance replications
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:  # List of private subnet IDs where the task should run
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED # Tasks do not need public IPs
          SecurityGroups:
            - !Ref MyECSSecurityGroup # Security group for the task, make sure it allows necessary traffic


  MyECSSecurityGroup:         #   TEMPORARY-----------------------------------------------------------------------------------
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS service
      VpcId: !Ref MyVPC # Make sure this references your VPC's logical ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allows HTTP traffic from anywhere, adjust as needed
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 # Allows all outbound traffic, adjust as needed








